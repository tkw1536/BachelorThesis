
//First we define dimentions
//These are just a type
//That has operations multiply and divide on it
Theory dimension {
  // A dimension, which is just a type.
  dimension: type

  // The 7 base dimensions in SI
  length: dimension
  mass: dimension
  time: dimension
  current: dimension
  temperature: dimension
  luminous: dimension
  amount: dimension

  //multiply
  dimmul: dimension -> dimension -> dimension

  // divide
  dimdiv: dimension -> dimension -> dimension
}


//Next we define units
//Each unit has a dimension.
THEORY units {
  //so it takes a dimension and returns a type.
  unit: dimension -> type

  //and then we can say:
  m = unit length
  s = unit time
}


//Let us move on to scalars
//we just assume they are given
THEORY Floats {

  //they are just a type
  float: type

  //we can do a lot of operations on them
  add: float -> float -> float
  sub: float -> float -> float
  mul: float -> float -> float
  div: float -> float -> float

  //and we would actually have to give all the axiomes of the operations
  //but we will simply omit them
  //and assume they are given

  //(they could potentially be imported)
}


THEORY QuantityExpressionP {

  //In this representastion we look at QEs as a pair

  //Construct a quantity expression as a pair.
  QuantityExpression: scalar -> unit -> type

  //get the dimension of a QE
  //TODO: Check if this is the right type.
  getDim: QuantityExpression -> dimension : {x:dimension} primQE _ unit x = x


  //TODO: Define operations on QEs
  //which should not work when we have different dimensions
}
